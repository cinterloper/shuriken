#!/bin/bash

declare -ra ARGS=("$@")
declare -ri NUM_ARGS=$#

declare isDebugBuild=false
declare isToBeMadeClean=false


function showUsage() 
{
    cat << EOF

Usage:  build [debug]
        build clean

EOF
}


function clean()
{
    make clean -w
    rm -fv lib/libsndlib_shuriken.a
    cd src/SndLibShuriken
    make clean -w
    cd ../..
}


function build()
{
    declare archString=""
    declare arch=""
    declare configOptions=""

    archString=$( lscpu | grep 'Architecture' )

    if [[ $archString =~ (x86_64) ]]; then
        arch="-64"
    fi

    if $isDebugBuild; then
        configOptions="CONFIG+=debug"
    fi

    # configure and make sndlib
    mkdir -p lib
    cd src/SndLibShuriken
    ./configure --without-audio --without-s7
    make -w
    mv -v libsndlib_shuriken.a ../../lib/
    cd ../..

    # make shuriken
    qmake-qt4 ./Shuriken.pro -r -spec linux-g++$arch $configOptions
    make -w

    if [ $? -eq 0 ]; then
        echo -e "\nSuccessfully built shuriken\n"
    fi
}


function processArgs()
{
    declare -i i=0

    if (( NUM_ARGS > 0 )); then
        while (( i < NUM_ARGS )); do
            case ${ARGS[$i]} in
                clean )             isToBeMadeClean=true;;
                debug )             isDebugBuild=true;;
                -h )                showUsage; exit 0;;
                --help )            showUsage; exit 0;;
                * )                 echo -e "\nInvalid arg: \"${ARGS[$i]}\""; showUsage; exit 1;;
            esac
            (( i++ ))
        done
    fi
}



processArgs

if $isToBeMadeClean; then
    clean
else
    build
fi

